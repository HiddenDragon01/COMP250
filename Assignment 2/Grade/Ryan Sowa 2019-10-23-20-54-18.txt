This comment file is divided in several section.

SUBMISSIONS_BREAKDOWN-------------------------------------
This section provides the recorded grade for each submission but without feedbacks
Be aware that the grade provided here include late penalties.

---------------------------------------------------------------
Submission[0] received at time: 2019-10-21 23:39:00
Submission[0] Actual Grade: 89.0

---------------------------------------------------------------
Submission[1] received at time: 2019-10-18 13:57:00
Submission[1] Actual Grade: 89.0

---------------------------------------------------------------
Submission[2] received at time: 2019-10-22 15:28:00
Submission[2] Actual Grade: 100.0

---------------------------------------------------------------
Best Scoring Submission was Submission[2], received at time 2019-10-22 15:28:00 with grade of 100.0.

---------------------------------------------------------------

BEST_SUBMISSION_COMPILE_SECTION-------------------------------------
This section provides any errors you may have before running the grader.
No error to report in this section
-----------------------------------------------------------------

BEST_SUBMISSION_RUNTIME_SECTION--------------------------------------------------
This section provides the feedback for your best submission. 

**************************************
Tests for method dividedBy()
**************************************
Divide: Test Case 1
Divide (80371569489)_10 by (68)_10
Expected: (1181934845)_10
Returned: (1181934845)_10
Correct

Divide: Test Case 2
Divide (10101001011100111010100101001110001)_2 by (101011010)_2
Expected: (11111010101111111101111001)_2
Returned: (11111010101111111101111001)_2
Correct

Divide: Test Case 3
Divide (161222654514623)_7 by (6333)_7
Expected: (20131356526)_7
Returned: (20131356526)_7
Correct

Divide: Test Case 4
Divide (31211323132223011033001)_4 by (13110121)_4
Expected: (1312313121001331)_4
Returned: (1312313121001331)_4
Correct

Divide: Test Case 5
Divide (21034344013212020120320101202400102403020203040240102203324231102043231431322130243132132144222021340443434402132011221003012422320133240202331021212314343021113211344143210413204112024213021321043210202231320001223412102203020121413201223241300241301423204231401312103240433210014231401222210332210012121012223012213221024222101133423210124211213200231420202013241321420122410231420132410112244231220132410010112302401342024014301402423024204303144103242031401320320004412312311324320120031230412034120341023401234012034303122102340121230120203102301023102301203012301023010230103012030120300212341234012340123401230412034120340123401230412304102340120401234012340123401234012340123041203401230412030120340123040020123412301234123410132401234012304120432023030202103040302030312301230412301230023012023020302020123023223323102030123012234412340230412034023412341234123411423422312400210120002003243)_5 by (410234021320224120243120433123400221220404431231231202310230123044002341230412304123041203410234012340123)_5
Expected: (23101341221312400020100230423242100040144141342413323411420443114413201032430312240240143214240200331342102134240014111011101231442330042430141334040200231234403420102313043033423224424144042434200420231410114444034141134021212123200323401320244231100234413212122311121030003304334412014041124004420020324414340321211140240320032143110023421312114412320330231230133211033334123111401144321313440240124113110111244104144401444102312044234311444241210102110143401143304400143314214202344000234230143321024032401210020100313100100112304211133443324023111224332313301230031144234320334040403223312200403023341243321142131023044331101404234431103024321404202001433420103214034221204230401444442141313110003340004114112012323013203412233402033024410431100033301103421443231004442044120230424400312102)_5
Returned: (23101341221312400020100230423242100040144141342413323411420443114413201032430312240240143214240200331342102134240014111011101231442330042430141334040200231234403420102313043033423224424144042434200420231410114444034141134021212123200323401320244231100234413212122311121030003304334412014041124004420020324414340321211140240320032143110023421312114412320330231230133211033334123111401144321313440240124113110111244104144401444102312044234311444241210102110143401143304400143314214202344000234230143321024032401210020100313100100112304211133443324023111224332313301230031144234320334040403223312200403023341243321142131023044331101404234431103024321404202001433420103214034221204230401444442141313110003340004114112012323013203412233402033024410431100033301103421443231004442044120230424400312102)_5
Correct

Divide Score Breakdown: 5 unit tests, 6 points each (total of 30 points)
Points Obtained: 30
Leading Zero Penalty (-3 points / unit test, up to a maximum of -6 points): N/A
Final Divide Score: 30 / 30




**************************************
Tests for method convert()
**************************************
Original Base == New Base: Test Case 1
Convert (10000010011011)_2 to base 2
Expected: (10000010011011)_2
Returned: (10000010011011)_2
Correct

Original Base > New Base: Test Case 1
Convert (7073)_10 to base 2
Expected: (1101110100001)_2
Returned: (1101110100001)_2
Correct

Original Base > New Base: Test Case 2
Convert (122358)_9 to base 6
Expected: (1330125)_6
Returned: (1330125)_6
Correct

Original Base > New Base: Test Case 3
Convert (531220)_7 to base 5
Expected: (10413233)_5
Returned: (10413233)_5
Correct

Original Base > New Base: Test Case 4
Convert (310132)_6 to base 4
Expected: (12001220)_4
Returned: (12001220)_4
Correct

Original Base > New Base: Test Case 5
Convert (32040421423222440143231412121230412304123401234412330423411203320324)_5 to base 3
Expected: (1100120021200001021100012220022012011101220222210102100211100112102000100222001101202011022021000010)_3
Returned: (1100120021200001021100012220022012011101220222210102100211100112102000100222001101202011022021000010)_3
Correct

Original Base < New Base: Test Case 1
Convert (1000100100000001)_2 to base 10
Expected: (35073)_10
Returned: (35073)_10
Correct

Original Base < New Base: Test Case 2
Convert (12102112)_3 to base 7
Expected: (14351)_7
Returned: (14351)_7
Correct

Original Base < New Base: Test Case 3
Convert (1303200)_4 to base 8
Expected: (16340)_8
Returned: (16340)_8
Correct

Original Base < New Base: Test Case 4
Convert (542040335350210234012341201430552134123444422423103501234144051223452252454204245314434)_6 to base 7
Expected: (111461422234402045325332611432643510354663303130114561624263451402663121600143656)_7
Returned: (111461422234402045325332611432643510354663303130114561624263451402663121600143656)_7
Correct

Convert Score Breakdown: 10 unit tests, 4 points each (total of 40 points)
Points Obtained: 40
Leading Zero Penalty (-2 points / unit test, up to a maximum of -8 points): N/A
Final Convert Score: 40 / 40




**************************************
Tests for method primeFactors()
**************************************

INPUT
n1 - (1)_5
Time taken (Prime Factorize): 0 ms
Answer returned - []
Answer expected - []
1st test case primeFactors() : 1 5.0/5 TestPassed

INPUT
n1 - (145145)_10
Time taken (Prime Factorize): 1 ms
Answer returned - [(5)_10, (7)_10, (11)_10, (13)_10, (29)_10]
Answer expected - [(5)_10, (7)_10, (11)_10, (13)_10, (29)_10]
2nd test case primeFactors() : Non prime number with no repeated factors. 5.0/5 TestPassed

INPUT
n1 - (313304200)_5
Time taken (Prime Factorize): 1 ms
Answer returned - [(2)_5, (2)_5, (2)_5, (2)_5, (3)_5, (3)_5, (3)_5, (10)_5, (10)_5, (21)_5, (21)_5]
Answer expected - [(2)_5, (2)_5, (2)_5, (2)_5, (3)_5, (3)_5, (3)_5, (10)_5, (10)_5, (21)_5, (21)_5]
3rd test case primeFactors() : Non prime number with repeated factors. 5.0/5 TestPassed

INPUT
n1 - (403)_7
Time taken (Prime Factorize): 1 ms
Answer returned - [(403)_7]
Answer expected - [(403)_7]
4th test case primeFactors() : Small prime number. 5.0/5 TestPassed

INPUT
n1 - (2147483647)_10
Time taken (Prime Factorize): 531 ms
Answer returned - [(2147483647)_10]
Answer expected - [(2147483647)_10]
5th test case primeFactors() : Large prime number. 4.0/4 TestPassed

INPUT
n1 - (5000000000000000000000000000000000000000000000000000)_10
Time taken (Prime Factorize): 6 ms
Answer returned - [(2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10]
Answer expected - [(2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10]
6th test case primeFactors() : Huge composite number. 1.0/1 TestPassed

INPUT
n1 - (5259224307470000000000000000000000000000000000000000000000000000000)_10
Time taken (Prime Factorize): 177 ms
Answer returned - [(2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (7)_10, (11213)_10, (6700417)_10]
Answer expected - [(2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (2)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (5)_10, (7)_10, (11213)_10, (6700417)_10]
7th test case primeFactors() : Even bigger composite number. 5.0/5 TestPassed

primeFactor() score breakdown: 7 test cases (4x5+4+1+5)for a total of 30
Points Obtained :30.0
Final primeFactor() score : 30.0/30

TOTAL RAW SCORE:  100  out of 100
Total Score: 100.0
---------------------------------------------------------------

FOOTNOTE-------------------------------------------------------
If you have questions for failed test cases or report potential bugs in the grader, please contact abhisek.konar@mail.mcgill.ca, brennan.nichyporuk@gmail.com
If you received a zero for timeout, please contact xiru.zhu@mail.mcgill.ca. 
If you have submission format problems, late penalty issues, or general autograding issues, please contact xiru.zhu@mail.mcgill.ca
Questions about the course material or this assignment should be addressed to TAs during office hours.
Any other request should be addressed to the lecturers.
You may resubmit assignments if you are not satisfied with your grade.
However, a 10 penalty applies per day late.
The grader will run only once per day once the assignment deadline pass.
Do not email about running the grader to see your resubmission grades. They will be ignored. 
Assignments were taken from my courses at 12:00 pm, 10/23/2019
---------------------------------------------------------------
